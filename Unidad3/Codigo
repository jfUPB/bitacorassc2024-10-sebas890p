```C

#include <stdio.h>
#include <SDL.h>

#define TRUE 1
#define FALSE 0
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600
#define PADDLE_WIDTH 100
#define PADDLE_HEIGHT 20
#define BALL_SIZE 15
#define PADDLE_SPEED 400
#define BALL_SPEED 400
#define FPS 60
#define FRAME_TARGET_TIME (1000/FPS)

int game_is_running = FALSE;
SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;
int player_score = 0;
int opponent_score = 0;

typedef struct {
    float x;
    float y;
    float vel_x;
    float vel_y;
} Ball;

typedef struct {
    float x;
    float y;
    float vel_x;
    void (*move)(struct Paddle *paddle, float delta_time);
} Paddle;

void move_paddle(Paddle *paddle, float delta_time) {
    paddle->x += paddle->vel_x * delta_time;
    paddle->x = paddle->x < 0 ? 0 : (paddle->x > WINDOW_WIDTH - PADDLE_WIDTH ? WINDOW_WIDTH - PADDLE_WIDTH : paddle->x);
}

void move_opponent_paddle(Paddle *paddle, float delta_time) {
    // Add opponent paddle movement logic here
}

int initialize_window(void) {
    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
        fprintf(stderr, "Error initializing SDL.\n");
        return FALSE;
    }
    window = SDL_CreateWindow(
        "Pong",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        WINDOW_WIDTH,
        WINDOW_HEIGHT,
        SDL_WINDOW_SHOWN
    );
    if (!window) {
        fprintf(stderr, "Error creating SDL Window.\n");
        return FALSE;
    }
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (!renderer) {
        fprintf(stderr, "Error creating SDL Renderer.\n");
        return FALSE;
    }
    return TRUE;
}

void process_input(Paddle* player_paddle, Paddle* opponent_paddle) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        switch (event.type) {
            case SDL_QUIT:
                game_is_running = FALSE;
                break;
            case SDL_KEYDOWN:
                switch (event.key.keysym.sym) {
                    case SDLK_ESCAPE:
                        game_is_running = FALSE;
                        break;
                    case SDLK_LEFT:
                        player_paddle->vel_x = -PADDLE_SPEED;
                        break;
                    case SDLK_RIGHT:
                        player_paddle->vel_x = PADDLE_SPEED;
                        break;
                    case SDLK_a:
                        opponent_paddle->vel_x = -PADDLE_SPEED;
                        break;
                    case SDLK_d:
                        opponent_paddle->vel_x = PADDLE_SPEED;
                        break;
                }
                break;
            case SDL_KEYUP:
                switch (event.key.keysym.sym) {
                    case SDLK_LEFT:
                    case SDLK_RIGHT:
                        player_paddle->vel_x = 0;
                        break;
                    case SDLK_a:
                    case SDLK_d:
                        opponent_paddle->vel_x = 0;
                        break;
                }
                break;
        }
    }
}

void setup(Ball* ball, Paddle* player_paddle, Paddle* opponent_paddle) {
    ball->x = WINDOW_WIDTH / 2 - BALL_SIZE / 2;
    ball->y = WINDOW_HEIGHT / 2 - BALL_SIZE / 2;
    ball->vel_x = BALL_SPEED;
    ball->vel_y = BALL_SPEED;
    player_paddle->x = WINDOW_WIDTH / 2 - PADDLE_WIDTH / 2;
    player_paddle->y = WINDOW_HEIGHT - 40;
    player_paddle->move = move_paddle;
    opponent_paddle->x = WINDOW_WIDTH / 2 - PADDLE_WIDTH / 2;
    opponent_paddle->y = 20;
    opponent_paddle->move = move_opponent_paddle;
}

void update(Ball* ball, Paddle* player_paddle, Paddle* opponent_paddle, float delta_time) {
    ball->x += ball->vel_x * delta_time;
    ball->y += ball->vel_y * delta_time;

    player_paddle->move(player_paddle, delta_time);
    opponent_paddle->move(opponent_paddle, delta_time);

    // Collision detection and other game logic
}

void render(Ball* ball, Paddle* player_paddle, Paddle* opponent_paddle) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    
    SDL_Rect ball_rect = { (int)ball->x, (int)ball->y, BALL_SIZE, BALL_SIZE };
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderFillRect(renderer, &ball_rect);
    
    SDL_Rect player_paddle_rect = { (int)player_paddle->x, (int)player_paddle->y, PADDLE_WIDTH, PADDLE_HEIGHT };
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderFillRect(renderer, &player_paddle_rect);

    SDL_Rect opponent_paddle_rect = { (int)opponent_paddle->x, (int)opponent_paddle->y, PADDLE_WIDTH, PADDLE_HEIGHT };
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderFillRect(renderer, &opponent_paddle_rect);

    SDL_RenderPresent(renderer);
}

void destroy_window(void) {
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
}

int main(int argc, char* args[]) {
    game_is_running = initialize_window();
    if (!game_is_running) return 1;
    
    Ball ball;
    Paddle player_paddle, opponent_paddle;
    setup(&ball, &player_paddle, &opponent_paddle);

    Uint32 frame_start_time = 0;
    float delta_time = 0;

    while (game_is_running) {
        frame_start_time = SDL_GetTicks();
        
        process_input(&player_paddle, &opponent_paddle);
        update(&ball, &player_paddle, &opponent_paddle, delta_time);
        render(&ball, &player_paddle, &opponent_paddle);

        delta_time = (SDL_GetTicks() - frame_start_time) / 1000.0f;
        if (delta_time < FRAME_TARGET_TIME) {
            SDL_Delay((Uint32)(FRAME_TARGET_TIME - delta_time));
            delta_time = (FRAME_TARGET_TIME + SDL_GetTicks() - frame_start_time) / 1000.0f;
        }
    }

    destroy_window();
    return 0;
}
```
